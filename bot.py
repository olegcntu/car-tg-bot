from telebot import *
from rules import *
import psycopg2 as ps
from psycopg2 import Error

terms = [-1, -1, -1, -1, -1]
N = 0
bot = telebot.TeleBot('TOKEN')
username = "noname"
try:
    connection = ps.connect(user="postgres", password="123re", host="127.0.0.1", port="5432", database="cars")
    cursor = connection.cursor()
except (Exception, Error) as error:
    print("Error!!! Cannot connect to PostgreSQL", error)


@bot.message_handler(commands=['start'])
def start(message):
    mess = '–ü—Ä–∏–≤—ñ—Ç, ' + message.from_user.first_name + '! –ù—É —â–æ, –Ω—É–º–æ –ø—ñ–¥–±–∏—Ä–∞—Ç–∏ —Ç–æ–±—ñ –∫—Ä—É—Ç—É —Ç–∞—á–∫—É? ' \
                                                       '–Ø–∫—â–æ –≥–æ—Ç–æ–≤–∏–π, —Ç–æ –Ω–∞—Ç–∏—Å–∫–∞–π –Ω–∞ /quiz üòé'
    bot.send_message(message.chat.id, mess.format(message.from_user.first_name))


@bot.message_handler(commands=['help'])
def send_help(message):
    mess = "–Ø–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –∫–ª—ñ–∫–∞–π –Ω–∞ /quiz, —è–∫—â–æ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ - " \
           "/results üòâ"
    bot.send_message(message.chat.id, mess)


@bot.message_handler(commands=['quiz'])
def quiz(message):
    global terms
    terms = [-1, -1, -1, -1, -1]
    global N
    global username
    username = message.from_user.first_name
    N = 0
    question(message)


def question(message):
    if N == 0:
        mess = "–í–∏ –≤–∑–∞–≥–∞–ª—ñ –∑–Ω–∞–π–æ–º—ñ –∑ –ü–î–†?"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–©–æ —Ç–∞–∫–µ –ü–î–†?", callback_data='quiz_0'))
        markup.add(types.InlineKeyboardButton("–ó—Ä–æ–±–∏–º–æ –≤–∏–≥–ª—è–¥, —â–æ —Ç–∞–∫", callback_data='quiz_1'))
        bot.send_message(message.chat.id, mess, reply_markup=markup)
    if N == 1:
        mess = "–û—Ü—ñ–Ω—ñ—Ç—å –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –í–∞–º –≤–∞–∂–ª–∏–≤–∏–π –∑–æ–≤–Ω—ñ—à–Ω—ñ–π –≤–∏–≥–ª—è–¥ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –≤—ñ–¥ 0 –¥–æ 5. " \
               "0 ‚Äì –º–µ–Ω—ñ –≤—Å–µ –æ–¥–Ω–æ, –≥–æ–ª–æ–≤–Ω–µ —â–æ–± —ó–∑–¥–∏–ª–∞, 5 ‚Äì –º–∞—à–∏–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–≥–ª—è–¥–∞—Ç–∏ –∫—Ä—É—Ç–æ, —â–æ–± –≤—Å—ñ –∑–∞–∑–¥—Ä–∏–ª–∏!"
        bot.send_message(message.chat.id, mess)
        bot.register_next_step_handler(message, get_answer)
    if N == 2:
        mess = "–û—Ü—ñ–Ω—ñ—Ç—å –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –í–∏ —Å–ø–æ–∫—ñ–π–Ω–∏–π –≤–æ–¥—ñ–π –≤—ñ–¥ 0 –¥–æ 5. " \
               "0 ‚Äì –¥—É–∂–µ —Å–ø–æ–∫—ñ–π–Ω–∏–π —Ç–∞ –∞–∫—É—Ä–∞—Ç–Ω–∏–π, 5 ‚Äì —è –∞–≥—Ä–µ—Å–∏–≤–Ω–∏–π —Ç–∞ –ª—é–±–ª—é —à–≤–∏–¥–∫—ñ—Å—Ç—å!"
        bot.send_message(message.chat.id, mess)
        bot.register_next_step_handler(message, get_answer)
    if N == 3:
        mess = "–°–∫—ñ–ª—å–∫–∏ –í–∏ –≥–æ—Ç–æ–≤—ñ –ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ —Ä–µ–º–æ–Ω—Ç –º–∞—à–∏–Ω–∏? –û—Ü—ñ–Ω—ñ—Ç—å –≤—ñ–¥ 0 –¥–æ 5. " \
               "0 ‚Äì –Ω–∞ —Ä–µ–º–æ–Ω—Ç –≥—Ä–æ—à–µ–π –Ω–µ–º–∞, 5 ‚Äì –¥–ª—è –º–æ—î—ó –∫—Ä–∏—Ö—ñ—Ç–∫–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ —à–∫–æ–¥–∞!"
        bot.send_message(message.chat.id, mess)
        bot.register_next_step_handler(message, get_answer)
    if N == 4:
        mess = "–Ü –æ—Å—Ç–∞–Ω–Ω—î –ø–∏—Ç–∞–Ω–Ω—è‚Ä¶ —Ä–æ–∑–º—ñ—Ä –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è?"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–¢–∞–∫", callback_data='quiz_yes'))
        markup.add(types.InlineKeyboardButton("–ù—ñ", callback_data='quiz_no'))
        bot.send_message(message.chat.id, mess, reply_markup=markup)


def get_answer(message):
    global terms
    global N
    txt = str(message.text.lower())
    if not txt.isnumeric():
        print("error input =", message.text)
        bot.send_message(message.chat.id, '–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º –≤—ñ–¥ 0 –¥–æ 5.')
        bot.register_next_step_handler(message, get_answer)
        return
    term = int(txt)
    print(N, 'question:', term)
    if 0 < term > 10:
        print("error input =", message.text)
        bot.send_message(message.chat.id, '–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º –≤—ñ–¥ 0 –¥–æ 5.')
        bot.register_next_step_handler(message, get_answer)
    else:
        terms[N] = term
        N += 1
        question(message)


@bot.message_handler(commands=['results'])
def results(message):
    global username
    username = message.from_user.first_name
    car_im = 'error.png'
    mess = "–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n"
    try:
        global cursor
        cursor.execute("select * from quiz where chat_id = %s and user_name = %s order by id desc limit 1",
                       (message.chat.id, username))
        for data in cursor:
            if data[3] == 0:
                mess += '–ó–Ω–∞–Ω–Ω—è –ü–î–†: –≤—ñ–¥—Å—É—Ç–Ω—î\n'
            else:
                mess += '–ó–Ω–∞–Ω–Ω—è –ü–î–†: —â–æ—Å—å –∑–Ω–∞—î—à\n'
            mess += '–ë–∞–∂–∞–Ω–Ω—è –≤–∏–ø–µ–Ω–¥—Ä—é–≤–∞—Ç–∏—Å—è —Ç–∞—á–∫–æ—é - ' + str(data[4])
            mess += '\n–†—ñ–≤–µ–Ω—å —É—Ä—ñ–≤–Ω–æ–≤–∞–∂–µ–Ω–æ—Å—Ç—ñ - ' + str(data[5])
            mess += '\n–ù–∞—è–≤–Ω—ñ—Å—Ç—å –≥—Ä–æ—à–µ–π - ' + str(data[6])
            if data[7] == 0:
                mess += '\n–†–æ–∑–º—ñ—Ä –Ω–µ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è\n'
            else:
                mess += '\n–†–æ–∑–º—ñ—Ä –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è\n'
            mess += '\n–û—Ü—ñ–Ω–∫–∞ - ' + str(data[8])
            mess += '\n' + get_car_description(str(data[9]))
            car_im = str(data[9])
            if car_im == 'BM' or car_im == 'BX':
                car_im += '.png'
            else:
                car_im += '.jpg'
        photo = open(car_im, 'rb')
        connection.commit()
        bot.send_message(message.chat.id, mess)
        bot.send_photo(message.chat.id, photo)
    except (Exception, Error) as error:
        print("Error!!! Cannot connect to PostgreSQL", error)


def get_car_description(car):
    result = ''
    if car == 'TS':
        result = '–ú–∞–ª–µ–Ω—å–∫–∞ —ñ–≥—Ä–∞—à–∫–æ–≤–∞ –º–∞—à–∏–Ω–∫–∞ üòé'
    elif car == 'TB':
        result = '–í–µ–ª–∏–∫–∞ —ñ–≥—Ä–∞—à–∫–æ–≤–∞ –º–∞—à–∏–Ω–∫–∞ üòé'
    elif car == 'RL':
        result = 'Renault Logan üòé'
    elif car == 'RS':
        result = 'Renault Sandero üòé'
    elif car == 'BM':
        result = 'BMW M5 üòé'
    elif car == 'BX':
        result = 'BMW X5 üòé'
    elif car == 'AMG':
        result = 'Mercedes-Benz AMG üòé'
    elif car == 'GLE':
        result = 'Mercedes-Benz GLE üòé'
    elif car == 'MA':
        result = 'Maserati üòé'
    elif car == 'LM':
        result = 'Lamborghini Urus üòé'
    return result


def register_answers(message):
    fs.set_variable('x1', terms[0])
    fs.set_variable('x2', terms[1])
    fs.set_variable('x3', terms[2])
    fs.set_variable('x4', terms[3])
    fs.set_variable('x5', terms[4])
    m = fs.Mamdani_inference()
    y = m.get('y')
    print('y mamdani =', y)
    car = get_car(y)
    print("car = ", car)
    try:
        global cursor
        chat_id = message.chat.id
        insert_q = """ insert into quiz (chat_id, user_name, x1, x2, x3, x4, x5, y, car) 
                            values (%s, %s, %s, %s, %s, %s, %s, %s, %s)"""
        cursor.execute(insert_q, (chat_id, username, terms[0], terms[1], terms[2], terms[3], terms[4], y, car))
        connection.commit()
    except (Exception, Error) as error:
        print("Error!!! Cannot connect to PostgreSQL", error)

    car_im = car
    if car_im == 'BM' or car_im == 'BX':
        car_im += '.png'
    else:
        car_im += '.jpg'
    photo = open(car_im, 'rb')
    mess = "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è: " + str(y) + "\n" + get_car_description(
        car) + "\n–ü–æ—á–∏–Ω–∞–π –∑–±–∏—Ä–∞—Ç–∏ $ –Ω–∞ —Ü—é –∫—Ä–∏—Ö—ñ—Ç–∫—É  üòé"
    bot.send_message(message.chat.id, mess)
    bot.send_photo(message.chat.id, photo)


@bot.callback_query_handler(func=lambda m: True)
def callback_handler(call):
    print('callback_handler {0}'.format(call))
    bot.answer_callback_query(callback_query_id=call.id)
    global terms
    global N
    if call.data == 'quiz_0':
        terms[0] = 0
        print("rules = 0")
        N += 1
        question(call.message)
    elif call.data == 'quiz_1':
        terms[0] = 1
        print("rules = 1")
        N += 1
        question(call.message)
    elif call.data == 'quiz_yes':
        terms[4] = 1
        print("size = 1")
        N += 1
        register_answers(call.message)
    elif call.data == 'quiz_no':
        terms[4] = 0
        print("size = 0")
        N += 1
        register_answers(call.message)
    else:
        print('callback_handler else {0}'.format(call.data))


bot.polling(none_stop=True)
